C
C
C
C   GRAFIT.F4
C
C   2/1/79
C
C   ALLOWS PLOTTING IN CARTESIAN COORDINATES.
C
C
C
C   AT STARTUP GRAFIT ASKS FOR THE NAME OF THE FILE
C   CONTAINING THE DATA TO BE PLOTTED.  THE RESPONSE SHOULD BE OF THE
C   FORM:  FILENAM.EXT(CR).  IF THE EXTENSION IS .DAT THIS MAY BE
C   OMMITTED.  IF NO FILENAME IS SPECIFIED FOR20.DAT IS THE ASSUMED
C   FILENAME.  THE FOLLOWING IS A DESCRIPTION OF WHAT THAT ASCII FILE
C   SHOULD CONTAIN IN ORDER TO MAKE A PLOT.
C
C
C   THE TYPE OF PLOT TO BE GENERATED IS CONTROLLED BY
C   CERTAIN CODE NUMBERS IN THE FILE WHICH CONTAINS THE DATA TO
C   BE PLOTTED.
C
C
C   THE FIRST SIX ENTRIES IN THE DATA FILE (ONE PER LINE) ARE:
C   XMAX, YMAX, XMIN, YMIN, XDIV, AND YDIV. THESE ARE IN THE
C   FORMAT SPECIFIED BY STATEMENT 56.  XMAX, YMAX, XMIN, AND YMIN ARE THE
C   MAXIMUM AND MINIMUM X AND Y LIMITS OF THE GRAPH TO BE DRAWN (IN TERMS
C   OF THE COORDINATE SYSTEM OF THE DATA TO BE PLOTTED).  XDIV AND YDIV
C   ARE THE INTERVALS BETWEEN TIC MARKS TO BE PLACED ON THE AXES.
C
C   THE NEXT TWO LINES OF DATA CONTAIN THE OVERALL WIDTH AND HEIGHT
C   OF THE GRAPH (INCLUDING AXIS LABELS ETC.) IN CM.
C
C
C   THE NEXT LINE OF THE DATA FILE CONTAINS THE
C   VALUES OF ENDS, ENDD, ENDP, SQARE, AND POINT IN FORMAT SPECIFIED
C   BY LINE 890 OF THIS PROGRAM. *** NOTE *** THESE ARE THE CONTROL CODES
C   FOR THE BELOW MENTIONED FUNCTIONS.  THEY MAY HAVE ANY NUMERIC VALUE
C   BUT SHOULD BE UNIQUE AND NOT IN THE RANGE OF THE DATA TO BE PLOTTED.
C
C
C   NEXT IN THE DATA FILE IS THE INFORMATION REQUIRED TO LABEL AND
C   NUMBER THE AXES ARRANGED ONE RECORD PER LINE AS FOLLOWS:
C   NY			(# OF CHARACTERS IN THE Y LABEL IN I3 FORMAT)
C   NX			(# OF CHARACTERS IN THE X LABEL IN I3 FORMAT)
C   LABEL FOR Y AXIS	(ACTUAL TEXT OF THE Y LABEL)
C   LABEL FOR X AXIS	(ACTUAL TEXT OF THE X LABEL)
C   FORMX		(FORMAT FOR THE X AXIS NUMBERING IN F3.1 FORMAT)
C   FORMY		(FORMAT FOR THE Y AXIS NUMBERING IN F3.1 FORMAT)
C   IF NY OR NX ARE ZERO THE CORRESPONDING AXIS IS NOT LABELED AND
C   THAT LABEL IS ASSUMED TO NOT BE IN THE FILE.  FORMY = 4.2 MEANS
C   THE Y AXIS WILL BE NUMBERED IN F4.2 FORMAT; FORMY = 3.0 MEANS
C   THE Y AXIS WILL BE NUMBERED IN I3 FORMAT.  IN GENERAL, FORMX AND
C   FORMY = A.B MEANS THE CORRESPONDING AXIS WILL BE NUMBERED IN FA.B
C   FORMAT IF B IS NON-ZERO.  IF B IS ZERO THE FORMAT WILL BE IA.  IF
C   FORMX OR FORMY = 0.0, NO NUMBERS WILL BE PLACED ON THE CORRESPONDING
C   AXIS.
C
C
C   NEXT IN THE DATA FILE COME THE ACTUAL DATA COUPLES AND SPECIAL CODE
C   COUPLES.  CODE NUMBERS IN THE INPUT DATA FILE CONTROL
C   HOW THE PLOT IS GENERATED. DATA COUPLES SHOULD BE STORED IN THE FILE
C   IN THE FORMAT SPECIFIED BY FORMAT STATEMENT #57
C   OF THIS PROGRAM (ONE X,Y COUPLE PER LINE).  CERTAIN
C   VALUES OF X ON INPUT CAUSE THE FOLLOWING ACTIONS TO OCCUR:
C
C   X=(ANY NUMBER EXCEPT: SQARE, POINT, ENDS, ENDD OR ENDP)   THIS LINE
C   OF INPUT IS INTERPRETED AS AN (X,Y) DATA COUPLE.
C
C   X=POINT    THE FOLLOWING DATA IS TO BE PLOTTED AS DISCONNECTED POINTS
C   THESE POINTS WILL BE REPRESENTED BY THE CHARACTER WHOSE
C   DECIMAL ASCII VALUE (32-125) APPEARS IN THE Y POSITION.
C
C   X=SQARE     INDICATES THAT A POLYNOMIAL LEAST SQUARES
C   FIT TO THE FOLLOWING DATA IS TO BE COMPUTED.  THE Y VALUE ON THE SAME
C    LINE IS TAKEN AS THE ORDER OF THE APPROXIMATING POLYNOMIAL.
C   THE NEXT DATA COUPLE IS THEN TAKEN AS (CODE,CH), WHERE CODE=0
C   CAUSES ONLY THE POLYNOMIAL CURVE TO BE PLOTTED; CODE=1 CAUSES
C   THE DATA TO BE PLOTTED AS DISCRETE POINTS AND THE POLYNOMIAL
C   TO BE PLOTTED AS A SMOOTH CURVE. IN THIS CASE CH IS TAKEN AS
C   THE DECIMAL ASCII VALUE OF THE CHARACTER USED TO MARK
C   THE DISCRETE DATA POINTS. CODE=2 CAUSES THE POLYNOMIAL TO BE
C   PLOTTED AS A SMOOTHE CURVE AND THE DISCRETE DATA POINTS TO BE
C   CONNECTED BY STRAIGHT LINES, IN THIS CASE CH IS NOT USED BUT
C   SOME DUMMY VALUE MUST BE PRESENT.
C
C
C   X=ENDS   INDICATES THAT THE END OF ONE DATA SET HAS BEEN REACHED
C   AND THAT ANOTHER (TO BE PLOTTED ON THE SAME GRAPH) IS TO FOLLOW;
C   ALL GRAPHING AND LEAST SQUARES COMPUTATION IS COMPLETED ON THIS SET
C   BEFORE STARTING THE NEXT.
C
C   X=ENDD   MARKS THE END OF THE (X,Y) DATA COUPLES FOR THIS GRAPH.
C   THE GRAPH IS FINISHED AND OUTPUT AND NEW VALUES OF CONTROL
C   PARAMETERS (XMAX,YMAX,ENDS,ETC.) ARE READ IN FOR NEXT GRAPH.
C
C   X=ENDP	END OF LAST GRAPH PLOTTED FROM THIS FILE.
C
C   AFTER ALL THE DATA COUPLES FOR A GIVEN GRAPH AND THE TERMINATING
C   LINE CONTAINING "ENDD" OR "ENDP" COMES THE INFORMATION REQUIRED
C   TO PLACE AUXILIARY INFORMATION ON THE GRAPH.  THE FIRST LINE IN THE
C   AUXILIARY SPECIFICATIONS CONTAINS (IN I3 FORMAT) "NCHA"; THE NUMBER
C   OF CHARACTERS IN THE TEXT TO BE PLACED SOMEWHERE ON THE GRAPH.  IF
C   NCHA = 0, GRAFIT ASSUMES THE PLOT IS FINISHED.  OTHERWISE THE LINE
C   FOLLOWING IS ASSUMED TO CONTAIN NCHA CHARACTERS OF TEXT.  THE LINE
C   FOLLOWING THE TEXT CONTAINS THE X AND Y COORDINATES (IN THE SAME FORM
C   AS THE ACTUAL DATA COUPLES) OF THE LOWER LEFT CORNER OF THE FIRST
C   CHARACTER IN THE TEXT TO BE PLOTTED.  FOLLOWING THIS PAIR ON THE NEXT
C   LINE IS A PAIR SPECIFYING THE HEIGHT AND WIDTH (IN CM.) OF THE
C   CHARACTERS USED TO PLOT THE TEXT.  THE LINE FOLLOWING THE HEIGHT AND
C   WIDTH CONTAINS NCHA AGAIN, AND AGAIN NCHA = 0 IS TAKEN TO MEAN THAT
C   THE PLOT IS FINISHED.
C
C
C
C
C   AFTER THE FILENAME SPECIFICATION IS ENTERED, GRAFIT ASKS:
C   "SEND PLOT TO ZETA?" A RESPONSE OF Y(CR) WILL CAUSE THE PLOT TO
C   GO TO THE ZETAPLOTTER.  ANY OTHER RESPONSE CAUSES THE PLOT TO BE
C   SENT TO THE TEKTRONIX 4006 TERMINAL. (OF COURSE IF YOU ARE AT ANY
C   OTHER TERMINAL YOU WILL NOT GET A PLOT BUT ENDLESS STREAMS OF
C   APPARANTLY RANDOM CHARACTERS UNTILL YOU FRANTICALLY HIT ^C^C).
C
C
	DOUBLE PRECISION STR
	DIMENSION PIN(2),SCAL(7),ALIN(100),ALP(20)
	DIMENSION X(1000),Y(1000),XP(100),YP(100)
	DATA TEKTRO/.TRUE./
C
	WRITE(5,5000)
5000	FORMAT(1H ,'FILE= ',$)
	READ(5,5001)STR
5001	FORMAT(A10)
	OPEN(UNIT=20,DEVICE='DSK',FILE=STR)
C
C   IF IOK IS SET TO ONE BEFORE INITDP IS CALLED PLOT WILL GO TO
C   THE ZETA PLOTTER; IF IOK IS 0 PLOT WILL GO TO THE TEKTRONIX.
	IOK=1
	WRITE(5,999)
999	FORMAT(1H ,'SEND PLOT TO ZETA?',$)
	READ(5,998)ANS
998	FORMAT(A1)
	IF(ANS.EQ.'Y')TEKTRO=.FALSE.
	IF(TEKTRO)IOK=0
	CALL INITDP(IOK)
	IF(IOK.EQ.0)GO TO 5111
	WRITE(5,1234)
1234	FORMAT(1H ,'DEV. PLT NOT ASSIGNED OR NOT AVAILABLE',/,' EXITING')
	STOP
C
C   THIS IS THE START OF THE LOOP WHICH OUTPUTS EACH GRAPH.
C
5111	READ(20,56)(SCAL(I),I=1,6),COL,HI
56	FORMAT(F12.6)
	READ(20,890)ENDS,ENDD,ENDP,SQARE,POINT
890	FORMAT(5F7.4)
C   COL IS THE DESIRED WIDTH OF PLOT AND AXIS LABLES IN CM.
C   GLAB IS WIDTH OF LABLE.
C   HI IS TOTAL DESIRED HEIGHT OF GRAPH AND LABLE.
C   GLABH IS THE HEIGHT OF THE LABLE.
	GLAB=.18*COL
	IF(GLAB.GT.2.)GLAB=2.
	HC=4.*GLAB/15.
	GLABH=2.5*HC
C   GWID IS THE MAX WIDTH GRAPH POSSIBLE IN CM.
C   GHI IS THE MAX. POSSIBLE HEIGHT OF THE PLOT.
5555	GHI=14.9
	GWID=18.4
	IF(TEKTRO)GO TO 5556
	GHI=27.94
	GWID=21.59
C   RED IS THE FACTOR BY WHICH THE GRAPH DIMENSIONS ARE TO BE MULTIPLIED.
5556	RED=1.
	PKX=RED*(COL-GLAB)/GWID
	PKY=RED*(HI-GLABH)/GHI
	XMIA=SCAL(1)-(SCAL(1)-SCAL(3))/PKX
	YMIA=SCAL(2)-(SCAL(2)-SCAL(4))/PKY
	XCES=(SCAL(3)-XMIA)/2.
	YCES=(SCAL(4)-YMIA)/2.
	XMAX=SCAL(1)+XCES
	YMAX=SCAL(2)+YCES
	XMIN=XMIA+XCES
	YMIN=YMIA+YCES
	CALL DSCALE(XMIN,YMIN,XMAX,YMAX)
	IX=SCAL(1)/SCAL(5)
	IF(SCAL(3).GT.0)IX=(SCAL(1)-SCAL(3))/SCAL(5)
	P1=(SCAL(2)-SCAL(4))*.015
	P2=-P1
	P3=SCAL(4)+P1
	P4=SCAL(2)-P1
	XOF2=0.
	IF(SCAL(3).GT.0.)XOF2=SCAL(3)
	DO 40 I=1,IX
	XA=I*SCAL(5)+XOF2
	CALL PXY(XA,SCAL(4),1)
40	CALL PXY(XA,P3,0)
	DO 41 I=1,IX
	XA=I*SCAL(5)+XOF2
	CALL PXY(XA,SCAL(2),1)
41	CALL PXY(XA,P4,0)
	IF(SCAL(4).GE.0.)GO TO 43
	DO 42 I=1,IX
	XA=I*SCAL(5)+XOF2
	CALL PXY(XA,P1,1)
42	CALL PXY(XA,P2,0)
43	IF(SCAL(3).GE.0.)GO TO 45
	IX=ABS(SCAL(3)/SCAL(5))
	IF(IX.EQ.0)GO TO 45
	DO 50 I=1,IX
	XA=-I*SCAL(5)
	CALL PXY(XA,SCAL(4),1)
50	CALL PXY(XA,P3,0)
	DO 51 I=1,IX
	XA=-I*SCAL(5)
	CALL PXY(XA,SCAL(2),1)
51	CALL PXY(XA,P4,0)
	IF((SCAL(2)*SCAL(4)).GE.0.)GO TO 45
	DO 52 I=1,IX
	XA=-I*SCAL(5)
	CALL PXY(XA,P1,1)
52	CALL PXY(XA,P2,0)
45	IY=SCAL(2)/SCAL(6)
	IF(SCAL(4).GT.0.)IY=(SCAL(2)-SCAL(4))/SCAL(6)
	P1=(SCAL(1)-SCAL(3))*.015
	P2=-P1
	P3=SCAL(1)-P1
	P4=SCAL(3)+P1
	YOF2=0.
	IF(SCAL(4).GT.0.)YOF2=SCAL(4)
	DO 60 I=1,IY
	YA=I*SCAL(6)+YOF2
	CALL PXY(SCAL(1),YA,1)
60	CALL PXY(P3,YA,0)
	DO 61 I=1,IY
	YA=I*SCAL(6)+YOF2
	CALL PXY(SCAL(3),YA,1)
61	CALL PXY(P4,YA,0)
	IF(SCAL(3).GE.0.)GO TO 63
	DO 62 I=1,IY
	YA=I*SCAL(6)+YOF2
	CALL PXY(P1,YA,1)
62	CALL PXY(P2,YA,0)
63	IF(SCAL(4).GE.0.)GO TO 65
	IY=ABS(SCAL(4)/SCAL(6))
	IF (IY.EQ.0)GO TO 65
	DO 70 I=1,IY
	YA=-I*SCAL(6)
	CALL PXY(SCAL(1),YA,1)
70	CALL PXY(P3,YA,0)
	DO 71 I=1,IY
	YA=-I*SCAL(6)
	CALL PXY(SCAL(3),YA,1)
71	CALL PXY(P4,YA,0)
	IF(SCAL(3).GE.0.)GO TO 73
	DO 72 I=1,IY
	YA=-I*SCAL(6)
	CALL PXY(P1,YA,1)
72	CALL PXY(P2,YA,0)
73	CONTINUE
65	IF(SCAL(4).GE.0.)GO TO 66
	CALL PXY(SCAL(1),0,1)
	CALL PXY(SCAL(3),0,0)
66	IF(SCAL(3).GE.0.)GO TO 67
	CALL PXY(0,SCAL(2),1)
	CALL PXY(0,SCAL(4),0)
67	CALL PXY(SCAL(1),SCAL(2),1)
	CALL PXY(SCAL(1),SCAL(4),0)
	CALL PXY(SCAL(3),SCAL(4),0)
	CALL PXY(SCAL(3),SCAL(2),0)
	CALL PXY(SCAL(1),SCAL(2),0)
C
C   NOW SEE IF AXIS ARE TO BE LABELED.
	XI=(SCAL(1)-SCAL(3))*GLAB/(COL-GLAB)
	YI=(SCAL(2)-SCAL(4))*GLABH/(HI-GLABH)
	XSCAB=(XMAX-XMIN)/GWID
	YSCAB=(YMAX-YMIN)/GHI
	H=RED*GLAB/5.
	W=.75*H
	HC=H*XSCAB
	WC=W*YSCAB
	XI2=SCAL(3)-XI+HC
	YI2=SCAL(4)+WC
	READ(20,900)NCO,NCA
900	FORMAT(I3)
	IF(NCO.EQ.0)GO TO 901
	READ(20,902)(ALIN(I),I=1,NCO)
902	FORMAT(100A1)
	ENCODE(NCO,903,ALP)ALIN
903	FORMAT(100A1)
	CALL PLOSW(.FALSE.)
	XA=XI2
	YA=YI2
	CALL PLSTR(XA,YA,HC,WC,90.,ALP,NCO)
	CALL PLOSW(.TRUE.)
	YI2=.5*(SCAL(2)+SCAL(4)-YA+YI2)
	CALL PLSTR(XI2,YI2,HC,WC,90.,ALP,NCO)
901	IF(NCA.EQ.0)GO TO 869
	READ(20,902)(ALIN(I),I=1,NCA)
	ENCODE(NCA,903,ALP)ALIN
	HC=H*YSCAB
	WC=W*XSCAB
	XI3=SCAL(3)+WC
	YI3=SCAL(4)-YI
	XA=XI3
	YA=YI3
	CALL PLOSW(.FALSE.)
	CALL PLSTR(XA,YA,HC,WC,0.,ALP,NCA)
	CALL PLOSW(.TRUE.)
	XI3=.5*(SCAL(1)+SCAL(3)-XA+XI3)
	CALL PLSTR(XI3,YI3,HC,WC,0.,ALP,NCA)
C
C   PLOT NUMERIC VALUES ON AXIS IF REQUESTED.
C
869	READ(20,870)XFORM
	READ(20,870)YFORM
870	FORMAT(F3.1)
C   FIRST THE YAXIS
	IF(YFORM.EQ.0.)GO TO 86
	ND=YFORM
	NR=(.01+(YFORM-FLOAT(ND))*10.)
	XLOC=SCAL(3)-ND*WC-WC*.5
	YOF=.5*HC
	DO 850 I=1,10
	YTEMP=FLOAT(I)*SCAL(6)
	INT=(SCAL(2)-SCAL(4))/YTEMP
	IF(INT.LE.5)GO TO 80
850	CONTINUE
	GO TO 86
80	YLAB=0.
	IF(SCAL(2).LT.0.)YLAB=SCAL(2)+YTEMP
82	YLAB=YLAB-YTEMP
	IF(YLAB.LE.SCAL(4))GO TO 84
	XI2=XLOC
	YI2=YLAB-YOF
	CALL NUMB(XI2,YI2,HC,WC,0.,YLAB,ND,NR)
	GO TO 82
84	YLAB=-YTEMP
	IF(SCAL(4).GT.0.)YLAB=SCAL(4)-YTEMP
85	YLAB=YLAB+YTEMP
	IF(YLAB.GE.SCAL(2))GO TO 86
	XI2=XLOC
	YOF=.5*HC
	IF(YLAB.LE.SCAL(4))YOF=0.
	YI2=YLAB-YOF
	CALL NUMB(XI2,YI2,HC,WC,0.,YLAB,ND,NR)
	GO TO 85
C
C   NOW NUMBER THE X AXIS
86	ND=XFORM
	NR=(.01+XFORM-FLOAT(ND))*10.
	XOF=FLOAT(ND)*WC*.6
	YLOC=SCAL(4)-1.25*HC
	DO 87 I=1,10
	XTEMP=FLOAT(I)*SCAL(5)
	INT=(SCAL(1)-SCAL(3))/XTEMP
	IF(INT.LE.5)GO TO 88
87	CONTINUE
	GO TO 90
88	XLAB=0.
	IF(SCAL(1).LT.0.)XLAB=SCAL(1)+XTEMP
89	XLAB=XLAB-XTEMP
	IF(XLAB.LT.SCAL(3))GO TO 81
	XI2=XLAB-XOF
	YI2=YLOC
	CALL NUMB(XI2,YI2,HC,WC,0.,XLAB,ND,NR)
	GO TO 89
81	XLAB=-XTEMP
	IF(SCAL(3).GT.0.)XLAB=SCAL(3)-XTEMP
881	XLAB=XLAB+XTEMP
	IF(XLAB.GT.SCAL(1))GO TO 882
	XI2=XLAB-XOF
	YI2=YLOC
	CALL NUMB(XI2,YI2,HC,WC,0.,XLAB,ND,NR)
	GO TO 881
882	CONTINUE
90	HT=H*.6*YSCAB
	WT=H*.6*XSCAB
	IPEN=1
	IND=0
	CODE=3.
	LSQ=0
	ASSIGN 110 TO ISYM
95	READ(20,57)PIN
57	FORMAT(2F12.6)
C95	READ(20,57)FFIN,IIN
C57	FORMAT(F7.4,I6)
C   PIN(1)=FFIN
C   PIN(2)=IIN
	IF(PIN(1).EQ.ENDS)GO TO 909
	IF(PIN(1).EQ.ENDD)GO TO 200
	IF(PIN(1).EQ.ENDP)GO TO 223
	IF(PIN(1).EQ.SQARE)GO TO 940
	IF(PIN(1).NE.POINT)GO TO 115
	ICH=PIN(2)
955	ASSIGN 120 TO ISYM
	GO TO 95
115	IND=IND+1
	X(IND)=PIN(1)
	Y(IND)=PIN(2)
	GO TO ISYM
120	XI=PIN(1)-WT/2.
	YI=PIN(2)-HT/2.
	CALL PLCHAR(XI,YI,HT,WT,0.,ICH)
	GO TO 95
110	IF(IPEN.EQ.1.OR.CODE.EQ.0.)GO TO 789
	CALL PXY(XOL,YOL,1)
	CALL PXY(PIN(1),PIN(2),0)
789	XOL=PIN(1)
	YOL=PIN(2)
	IPEN=0
	GO TO 95
C
909	IF(LSQ.EQ.0)GO TO 90
919	CALL LSQUAR(X,Y,IND,NORD,XP,YP,ERR)
	WRITE(24,2233)ERR
2233	FORMAT(1H ,'RMS ERROR = ',F12.6)
	CALL PXY(XP(1),YP(1),1)
	DO 950 J=2,100
950	CALL PXY(XP(J),YP(J),0)
	IF(PIN(1).EQ.ENDD)GO TO 220
	IF(PIN(1).EQ.ENDP)GO TO 221
	GO TO 90
C
940	NORD=PIN(2)
	READ(20,57)CODE,CH
	ICH=CH
	LSQ=1
	IF(CODE.EQ.1.)GO TO 955
	GO TO 95
C
200	IF(LSQ.NE.0)GO TO 919
220	ASSIGN 5111 TO IGO
	GO TO 300
223	IF(LSQ.NE.0)GO TO 919
221	ASSIGN 310 TO IGO
	GO TO 300
310	STOP
C
C   PLACE ANY AUXILIARY ALPHANUMERICS ON THE PLOT NOW.
300	READ(20,900)NAL
	IF(NAL.NE.0)GO TO 305
	CALL PXY(XMAX,YMIN,1)
	CALL PXY(XMAX,YMIN,-7)
	GO TO IGO
305	READ(20,902)(ALIN(I),I=1,NAL)
	ENCODE(NAL,903,ALP)ALIN
	READ(20,57)PIN
	READ(20,57)HT,WT
	XI=PIN(1)
	YI=PIN(2)
	HT=HT*RED*YSCAB
	WT=WT*RED*XSCAB
	CALL PLSTR(XI,YI,HT,WT,0.,ALP,NAL)
	GO TO 300
	END
C
C************************* LSQUAR *************************
C
	SUBROUTINE LSQUAR(X,Y,M,N,XP,YP,ERR)
C   PROGRAM FOR FINDING SIMPLE LEAST SQUARES FIT OF ARBITRARY ORDER
C   TO AN ARBITRARY DATA SET.
C
C   BY:   DAVID TALKIN
C   S.C.R.L. GALLAUDET COLLEGE
C   KENDALL GREEN
C   WASHINGTON, D.C. 20002
C
	DIMENSION A(20,40),X(1000),Y(1000),XP(100),YP(100)
C
20	NP=N+1
	NPP=NP+1
C   NOW SET UP COEFFICIENT MATRIX TO SOLVE FOR COEFFICIENTS OF
C   THE APPROXIMATING POLYNOMIAL.
	DO 50 I=1,NP
	A(I,NPP)=0.
	IM=I-1
	DO 23 K=1,M
23	A(I,NPP)=A(I,NPP)+(X(K)**IM)*Y(K)
	DO 50 J=1,NP
	KE=I+J-2
	A(I,J)=0.
	DO 50 K=1,M
50	A(I,J)=A(I,J)+X(K)**KE
	CALL GJSOL(A,NP,0,IERR)
	IF(IERR.EQ.0)GO TO 35
	WRITE(5,51)
51	FORMAT(1H ,'SOMETNINGS WRONG, INPUT NEW SET OF DATA.')
	STOP
C
C35	WRITE(5,55)
55	FORMAT(1H ,'HERE ARE THE COEFFICIENTS OF THE POLYNOMIAL:')
C   WRITE(5,57)(I,A(I,NPP),I=1,NP)
57	FORMAT(1H ,'A(',I1,')=',E15.6)
35	FMI=X(1)
	FMA=X(M)
	DO 577 I=1,M
	IF(X(I).LT.FMI)FMI=X(I)
	IF(X(I).GT.FMA)FMA=X(I)
577	CONTINUE
	FINC=(FMA-FMI)/99.
	DO 30 I=1,100
	YP(I)=0.
	XP(I)=FMI+FLOAT(I-1)*FINC
	DO 30 J=1,NP
	JM=J-1
30	YP(I)=YP(I)+A(J,NPP)*(XP(I)**JM)
	SSQ=0.
	DO 400 I=1,M
	YS=0.
	DO 410 J=1,NP
410	YS=YS+A(J,NPP)*(X(I)**(J-1))
400	SSQ=SSQ+(YS-Y(I))**2
	ERR=SQRT(SSQ/FLOAT(M))
	RETURN
	END
C
C************************* GJSOL *************************
C
	SUBROUTINE GJSOL(A,N,INV,IER)
C   COMPUTERIZED GAUSS-JORDAN METHOD OF SOLVING SIMULTANEOUS LINEAR
C   EQUATIONS AND INVERTING A MATRIX.
C
C   BY
C   DAVID TALKIN
C   S.C.R.L.
C   GALLAUDET COLLEGE
C   KENDALL GREEN
C   WASHINGTON, D.C. 20002
C
	DIMENSION A(20,40)
	IER=0
	IF(N.EQ.0)GO TO 65
	M=N+1
	IF(INV.EQ.0)GO TO 84
C   GENERATE AN IDENTITY MATRIX OF THE SAME ORDER AS INPUT MATRIX.
	NP=N+1
	M=N*2
	DO 44 I=1,N
	DO 44 K=NP,M
	A(I,K)=0.
	IF(K.EQ.(I+N))A(I,K)=1.
44	CONTINUE
C   THIS IS THE CORE OF THE GAUSS-JORDAN SCHEME.
84	DO 90 K=1,N
	IT=K+1
	IF(A(K,K).EQ.0.)GO TO 110
85	DO 80 L=IT,M
80	A(K,L)=A(K,L)/A(K,K)
	DO 90 I=1,N
	DO 90 L=IT,M
	IF(I.EQ.K)GO TO 90
	A(I,L)=A(I,L)-A(I,K)*A(K,L)
90	CONTINUE
	RETURN
C
C   TRANSPOSE ROWS TO REMOVE 0 ON DIAGONAL.
110	IF(K.EQ.N)GO TO 65
	DO 30 I=IT,N
	IF(A(I,K).EQ.0.)GO TO 30
	DO 35 J=1,M
	T=A(K,J)
	A(K,J)=A(I,J)
35	A(I,J)=T
	GO TO 85
30	CONTINUE
65	WRITE(5,60)
60	FORMAT(1H ,'SINGULAR SET')
	IER=1
	RETURN
	END
  